package com.spring.elderlycare.util;


import java.util.Hashtable;
import java.util.Timer;
import java.util.concurrent.ScheduledExecutorService;

import org.eclipse.paho.client.mqttv3.IMqttActionListener;
import org.eclipse.paho.client.mqttv3.IMqttAsyncClient;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.IMqttToken;
import org.eclipse.paho.client.mqttv3.MqttAsyncClient;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClientPersistence;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttPersistenceException;
import org.eclipse.paho.client.mqttv3.MqttPingSender;
import org.eclipse.paho.client.mqttv3.MqttSecurityException;
import org.eclipse.paho.client.mqttv3.TimerPingSender;
import org.eclipse.paho.client.mqttv3.internal.ClientComms;
import org.eclipse.paho.client.mqttv3.internal.NetworkModuleService;
import org.eclipse.paho.client.mqttv3.logging.Logger;
import org.eclipse.paho.client.mqttv3.logging.LoggerFactory;
import org.eclipse.paho.client.mqttv3.persist.MqttDefaultFilePersistence;
import org.springframework.stereotype.Component;
/*
 * https://github.com/eclipse/paho.mqtt.java/blob/master/org.eclipse.paho.client.mqttv3/src/main/java/org/eclipse/paho/client/mqttv3/MqttAsyncClient.java#L1275-L1280
 */
@Component
public class MQTTSubscribe2 implements IMqttAsyncClient{
	private static final String CLASS_NAME = MqttAsyncClient.class.getName();
	private Logger logger = LoggerFactory.getLogger(LoggerFactory.MQTT_CLIENT_MSG_CAT,CLASS_NAME);
	
	private static final String CLIENT_ID_PREFIX = "paho";
	private static final long QUIESCE_TIMEOUT = 30000;
	private static final long DISCONNECT_TIMEOUT = 10000;
	private static final char MIN_HIGH_SURROGATE = '\uD800';
	private static final char MAX_HIGH_SURROGATE = '\uDBFF';
	
	private String clientId;
	private String brokerURI;
	protected ClientComms comms;
	private Hashtable topics;
	private MqttClientPersistence persistence;
	private MqttCallback mqttCallback;
	private MqttConnectOptions connOpts;
	private Object userContext;
	private Timer reconnectTimer;
	private static int reconnectDelay = 1000;
	
	private boolean reconnecting = false;
	private static final Object clientLock = new Object();
	
	private ScheduledExecutorService executorService;
	
	public MQTTSubscribe2(String brokerURI, String clientId) throws MqttException{
		this(brokerURI, clientId, new MqttDefaultFilePersistence());
	}
	public MQTTSubscribe2(String brokerURI, String clientId, MqttDefaultFilePersistence mqttDefaultFilePersistence)throws MqttException {
		this(brokerURI, clientId, mqttDefaultFilePersistence, new TimerPingSender());
	}
	public MQTTSubscribe2(String brokerURI, String clientId, MqttDefaultFilePersistence mqttDefaultFilePersistence,
			MqttPingSender mqttPingSender)throws MqttException {
		this(brokerURI, clientId, mqttDefaultFilePersistence, mqttPingSender, null);
	}
	public MQTTSubscribe2(String brokerURI, String clientId, MqttDefaultFilePersistence mqttDefaultFilePersistence,
			MqttPingSender mqttPingSender, ScheduledExecutorService executorService) throws MqttException{
		final String methodName = "MQTTScriber2";
		
		logger.setResourceName(clientId);
		
		if(clientId == null) {
			throw new IllegalArgumentException("Null clientId");
		}
		int clientIdLength = 0;
		for(int i = 0; i < clientId.length() -1; i++) {
			if(Character_isHightSurrogate(clientId.charAt(i)))
				i++;
			clientIdLength++;
		}
		if(clientIdLength>65535) {
			throw new IllegalArgumentException("ClientId longer than 65535 characters");
		}
		
		NetworkModuleService.validateURI(brokerURI);
	}
	@Override
	public IMqttToken connect() throws MqttException, MqttSecurityException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken connect(MqttConnectOptions options) throws MqttException, MqttSecurityException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken connect(Object userContext, IMqttActionListener callback)
			throws MqttException, MqttSecurityException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken connect(MqttConnectOptions options, Object userContext, IMqttActionListener callback)
			throws MqttException, MqttSecurityException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken disconnect() throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken disconnect(long quiesceTimeout) throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken disconnect(Object userContext, IMqttActionListener callback) throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken disconnect(long quiesceTimeout, Object userContext, IMqttActionListener callback)
			throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void disconnectForcibly() throws MqttException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void disconnectForcibly(long disconnectTimeout) throws MqttException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void disconnectForcibly(long quiesceTimeout, long disconnectTimeout) throws MqttException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isConnected() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String getClientId() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getServerURI() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttDeliveryToken publish(String topic, byte[] payload, int qos, boolean retained)
			throws MqttException, MqttPersistenceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttDeliveryToken publish(String topic, byte[] payload, int qos, boolean retained, Object userContext,
			IMqttActionListener callback) throws MqttException, MqttPersistenceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttDeliveryToken publish(String topic, MqttMessage message)
			throws MqttException, MqttPersistenceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttDeliveryToken publish(String topic, MqttMessage message, Object userContext,
			IMqttActionListener callback) throws MqttException, MqttPersistenceException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken subscribe(String topicFilter, int qos) throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken subscribe(String topicFilter, int qos, Object userContext, IMqttActionListener callback)
			throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken subscribe(String[] topicFilters, int[] qos) throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken subscribe(String[] topicFilters, int[] qos, Object userContext, IMqttActionListener callback)
			throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken unsubscribe(String topicFilter) throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken unsubscribe(String[] topicFilters) throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken unsubscribe(String topicFilter, Object userContext, IMqttActionListener callback)
			throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IMqttToken unsubscribe(String[] topicFilters, Object userContext, IMqttActionListener callback)
			throws MqttException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setCallback(MqttCallback callback) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public IMqttDeliveryToken[] getPendingDeliveryTokens() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void close() throws MqttException {
		// TODO Auto-generated method stub
		
	}

}
